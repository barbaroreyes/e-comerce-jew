type Prenda @model {
  id: ID!
  name: String!
  description: String
  categoria: String!
  image: String
  price: Float
  orders: [PrendaOrder] @connection(keyName: "byPrenda", fields: ["id"])
}
type Cate @model{
id: ID!
name: String!
price: Float
image: String
}

type PrendaOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byPrenda", fields: ["prenda_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "prenda_id"])
  {
  id: ID!
  prenda_id: ID!
  order_id: ID!
  prenda: Prenda @connection(fields: ["prenda_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  prendas: [PrendaOrder] @connection(keyName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "makePay-${env}")
    @function(name: "makeOrder-${env}")
}



